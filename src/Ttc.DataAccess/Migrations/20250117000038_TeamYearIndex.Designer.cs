// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ttc.DataAccess;

#nullable disable

namespace Ttc.DataAccess.Migrations
{
    [DbContext(typeof(TtcDbContext))]
    [Migration("20250117000038_TeamYearIndex")]
    partial class TeamYearIndex
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Ttc.DataEntities.ClubEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CodeSporta")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CodeVttl")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Shower")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Club");
                });

            modelBuilder.Entity("Ttc.DataEntities.ClubLocationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("ClubId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("MainLocation")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("ClubLocation");
                });

            modelBuilder.Entity("Ttc.DataEntities.ClubManagerEntity", b =>
                {
                    b.Property<int>("ClubId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("ClubId", "PlayerId");

                    b.ToTable("ClubManager");
                });

            modelBuilder.Entity("Ttc.DataEntities.MatchCommentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Hidden")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PostedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Text")
                        .HasMaxLength(65000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("MatchComment");
                });

            modelBuilder.Entity("Ttc.DataEntities.MatchEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AwayClubId")
                        .HasColumnType("int");

                    b.Property<int?>("AwayScore")
                        .HasColumnType("int");

                    b.Property<string>("AwayTeamCode")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<int?>("AwayTeamId")
                        .HasColumnType("int");

                    b.Property<string>("Block")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Competition")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(65000)
                        .HasColumnType("TEXT");

                    b.Property<string>("FormationComment")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("FrenoyDivisionId")
                        .HasColumnType("int");

                    b.Property<string>("FrenoyMatchId")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("FrenoySeason")
                        .HasColumnType("int");

                    b.Property<int>("HomeClubId")
                        .HasColumnType("int");

                    b.Property<int?>("HomeScore")
                        .HasColumnType("int");

                    b.Property<string>("HomeTeamCode")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<int?>("HomeTeamId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSyncedWithFrenoy")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ReportPlayerId")
                        .HasColumnType("int");

                    b.Property<bool>("ShouldBePlayed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("WalkOver")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("HomeTeamId");

                    b.ToTable("Match");
                });

            modelBuilder.Entity("Ttc.DataEntities.MatchGameEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AwayPlayerSets")
                        .HasColumnType("int");

                    b.Property<int>("AwayPlayerUniqueIndex")
                        .HasColumnType("int");

                    b.Property<int>("HomePlayerSets")
                        .HasColumnType("int");

                    b.Property<int>("HomePlayerUniqueIndex")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("MatchNumber")
                        .HasColumnType("int");

                    b.Property<int>("WalkOver")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("MatchGame");
                });

            modelBuilder.Entity("Ttc.DataEntities.MatchPlayerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Home")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Ranking")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("StatusNote")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<int>("UniqueIndex")
                        .HasColumnType("int");

                    b.Property<int?>("Won")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.ToTable("MatchPlayer");
                });

            modelBuilder.Entity("Ttc.DataEntities.ParameterEntity", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Key");

                    b.ToTable("Parameter");
                });

            modelBuilder.Entity("Ttc.DataEntities.PlayerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Alias")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("BestStroke")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("City")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("ClubIdSporta")
                        .HasColumnType("int");

                    b.Property<int?>("ClubIdVttl")
                        .HasColumnType("int");

                    b.Property<int?>("ComputerNummerVttl")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FrenoyLinkSporta")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("FrenoyLinkVttl")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<bool?>("HasKey")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ImageVersion")
                        .HasColumnType("int");

                    b.Property<int?>("IndexSporta")
                        .HasColumnType("int");

                    b.Property<int?>("IndexVttl")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("LidNummerSporta")
                        .HasColumnType("int");

                    b.Property<string>("Mobile")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("NextRankingSporta")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("NextRankingVttl")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<int?>("QuitYear")
                        .HasColumnType("int");

                    b.Property<string>("RankingSporta")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("RankingVttl")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<int>("Security")
                        .HasColumnType("int");

                    b.Property<string>("Style")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("VolgnummerSporta")
                        .HasColumnType("int");

                    b.Property<int?>("VolgnummerVttl")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuitYear");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("Ttc.DataEntities.PlayerPasswordResetEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiresOn")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PlayerPasswordReset");
                });

            modelBuilder.Entity("Ttc.DataEntities.TeamEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Competition")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("DivisionCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("DivisionNumber")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("DivisionType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("FrenoyDivisionId")
                        .HasColumnType("int");

                    b.Property<string>("FrenoyTeamId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("LinkId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("TeamCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Year");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("Ttc.DataEntities.TeamOpponentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClubId")
                        .HasColumnType("int");

                    b.Property<string>("TeamCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamOpponent");
                });

            modelBuilder.Entity("Ttc.DataEntities.TeamPlayerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerType")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamPlayer");
                });

            modelBuilder.Entity("Ttc.DataEntities.ClubEntity", b =>
                {
                    b.OwnsOne("Ttc.DataEntities.Core.Audit", "Audit", b1 =>
                        {
                            b1.Property<int>("ClubEntityId")
                                .HasColumnType("int");

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("varchar(50)")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime>("CreatedOn")
                                .HasColumnType("datetime")
                                .HasColumnName("CreatedOn");

                            b1.Property<string>("ModifiedBy")
                                .HasMaxLength(50)
                                .HasColumnType("varchar(50)")
                                .HasColumnName("ModifiedBy");

                            b1.Property<DateTime?>("ModifiedOn")
                                .HasColumnType("datetime")
                                .HasColumnName("ModifiedOn");

                            b1.HasKey("ClubEntityId");

                            b1.ToTable("Club");

                            b1.WithOwner()
                                .HasForeignKey("ClubEntityId");
                        });

                    b.Navigation("Audit")
                        .IsRequired();
                });

            modelBuilder.Entity("Ttc.DataEntities.ClubLocationEntity", b =>
                {
                    b.HasOne("Ttc.DataEntities.ClubEntity", "Club")
                        .WithMany("Locations")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("Ttc.DataEntities.ClubManagerEntity", b =>
                {
                    b.HasOne("Ttc.DataEntities.ClubEntity", "Club")
                        .WithMany("Managers")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("Ttc.DataEntities.MatchCommentEntity", b =>
                {
                    b.HasOne("Ttc.DataEntities.MatchEntity", "Match")
                        .WithMany("Comments")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("Ttc.DataEntities.MatchEntity", b =>
                {
                    b.HasOne("Ttc.DataEntities.TeamEntity", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("AwayTeamId");

                    b.HasOne("Ttc.DataEntities.TeamEntity", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("HomeTeamId");

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");
                });

            modelBuilder.Entity("Ttc.DataEntities.MatchGameEntity", b =>
                {
                    b.HasOne("Ttc.DataEntities.MatchEntity", "Match")
                        .WithMany("Games")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("Ttc.DataEntities.MatchPlayerEntity", b =>
                {
                    b.HasOne("Ttc.DataEntities.MatchEntity", "Match")
                        .WithMany("Players")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ttc.DataEntities.PlayerEntity", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Ttc.DataEntities.ParameterEntity", b =>
                {
                    b.OwnsOne("Ttc.DataEntities.Core.Audit", "Audit", b1 =>
                        {
                            b1.Property<string>("ParameterEntityKey")
                                .HasColumnType("varchar(20)");

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("varchar(50)")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime>("CreatedOn")
                                .HasColumnType("datetime")
                                .HasColumnName("CreatedOn");

                            b1.Property<string>("ModifiedBy")
                                .HasMaxLength(50)
                                .HasColumnType("varchar(50)")
                                .HasColumnName("ModifiedBy");

                            b1.Property<DateTime?>("ModifiedOn")
                                .HasColumnType("datetime")
                                .HasColumnName("ModifiedOn");

                            b1.HasKey("ParameterEntityKey");

                            b1.ToTable("Parameter");

                            b1.WithOwner()
                                .HasForeignKey("ParameterEntityKey");
                        });

                    b.Navigation("Audit")
                        .IsRequired();
                });

            modelBuilder.Entity("Ttc.DataEntities.PlayerEntity", b =>
                {
                    b.OwnsOne("Ttc.DataEntities.Core.Audit", "Audit", b1 =>
                        {
                            b1.Property<int>("PlayerEntityId")
                                .HasColumnType("int");

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("varchar(50)")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime>("CreatedOn")
                                .HasColumnType("datetime")
                                .HasColumnName("CreatedOn");

                            b1.Property<string>("ModifiedBy")
                                .HasMaxLength(50)
                                .HasColumnType("varchar(50)")
                                .HasColumnName("ModifiedBy");

                            b1.Property<DateTime?>("ModifiedOn")
                                .HasColumnType("datetime")
                                .HasColumnName("ModifiedOn");

                            b1.HasKey("PlayerEntityId");

                            b1.ToTable("Player");

                            b1.WithOwner()
                                .HasForeignKey("PlayerEntityId");
                        });

                    b.Navigation("Audit")
                        .IsRequired();
                });

            modelBuilder.Entity("Ttc.DataEntities.TeamOpponentEntity", b =>
                {
                    b.HasOne("Ttc.DataEntities.ClubEntity", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ttc.DataEntities.TeamEntity", "Team")
                        .WithMany("Opponents")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Ttc.DataEntities.TeamPlayerEntity", b =>
                {
                    b.HasOne("Ttc.DataEntities.PlayerEntity", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ttc.DataEntities.TeamEntity", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Ttc.DataEntities.ClubEntity", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("Managers");
                });

            modelBuilder.Entity("Ttc.DataEntities.MatchEntity", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Games");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("Ttc.DataEntities.TeamEntity", b =>
                {
                    b.Navigation("Opponents");

                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
